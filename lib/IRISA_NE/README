###################################
#Christian Raymond
#8 octobre 2010
# christian.raymond (at) irisa.fr
#v1.0
###################################

Ce pakage inclu deux taggers, un à base de HMM et l'autre à base de CRF.
- il reconnait le jeu d'EN de Ester 2 http://fr.wikipedia.org/wiki/%C3%89valuation_des_syst%C3%A8mes_de_transcription_enrichie_d%27%C3%A9missions_radiophoniques#ESTER_2
- il a été fait pour traiter des transcriptions de parole: ne gère ni majuscule, ni ponctuation, ni notion de phrases
- mais il peut prendre en entré du texte capitalisé avec ponctuation quand même, je converti à ma sauce et tâche de rendre celles-ci.
- cette version est une version simplifiée du vrai qui s'appuie sur un vrai tagger morphosyntaxique, l'étiquetage morphosyntaxique produit ici est un HMM 3gram sous forme de SFST


Pour plus de détails sur les taggers:
@inproceedings{Raymond.Fayolle_2010,
  author = {Christian Raymond and Julien Fayolle},
  title = {Reconnaissance robuste d'entités nommées sur de la parole transcrite automatiquement},
  booktitle = {Traitement Automatique des Langues Naturelles},
  year = {2010},
  month = {July},
  address = {Montréal, Canada}
}



Alors, d'abord il faut les packages suivants (en plus de IRISA_NE) :
- AT&T FSM Library : http://www2.research.att.com/~fsmtools/fsm/license.html
- wapiti http://wapiti.limsi.fr/


Ensuite, il faut définir la variable d'environnement suivante (bien sûr là où il faut !!) :

- export IRISA_NE="/le/repertoire/dinstall/de/irisa_ne"
 
Compiler les ressources: indispensable selon l'utilisation des librairies 32 ou 64 bits des FSM

- ${IRISA_NE}/scripts/make_ressources.bash


Et enfin, les scripts suivants devraient marcher :

- ${IRISA_NE}/scripts/irisa_ne.bash CRF/FSM [-f2t]
	- CRF utilise le tagger CRF
	- FST utilise le tagger HMM
	- -f2h applique quelques règles de postprocessing pour passer d'une représentation à plat a une representation structuré: <fonc> président </fonc> <pers> chirac </pers> -> <pers> <fonc> président </fonc> <pers> chirac </pers> </pers>


- On peut tagger du texte simple, par exemple :

echo "Je vais à Marseille voir l' Olympique de Marseille." | ${IRISA_NE}/scripts/irisa_ne.bash CRF

ce qui donne:

<s> Je vais à <loc> Marseille </loc>  voir l' <org> Olympique de </org> <loc> Marseille </loc>.

- On peut aussi repasser à une structure hiérarchique via quelques règles simples :

echo "Je vais à Marseille voir l' Olympique de Marseille." | ${IRISA_NE}/scripts/irisa_ne.bash CRF -f2h

ce qui donne:

<s> Je vais à <loc> Marseille </loc>  voir l' <org> Olympique de  <loc> Marseille </loc> </org>.

- sans l'option -f2h on peut produire une page html pour visualiser rapidemment le résultat produit

echo "Je vais à Marseille voir l' Olympique de Marseille." | ${IRISA_NE}/scripts/irisa_ne.bash CRF | ${IRISA_NE}/scripts//txttagge2html.pl > toto.html

- evidemment le tagger ne sera performant que si le vocabulaire d'entrée est proche de celui qu'il connait, la présence de mots qu'il ne connait pas est normale, mais il se peut que des mots soient tokenisés diféremment et là il faut s'assurer de les tokeniser comme le tagger, pour vérifier cela vous pouvez utiliser le tagger FST:

	- cat texte | ${IRISA_NE}/scripts/irisa_ne.bash FST 
	- il va creer un fichier dans votre répertoire d'execution nommé irisa_ne.log qui contient les mots inconnus du système
	- si ces mots sont des noms propres, c'est normal
	- mais cela peut être des mots mal orthographiés que vous devrez corriger avant de les passer au tagger
	- ou des mots mal tokenisés, essayez de vous conformer à la liste du tagger (voir data/modeles/fst/lexique_en.syms)
